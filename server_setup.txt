SERVER SETUP:
https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04
https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xvii-deployment-on-linux


<-------------------------------------------------------------------------->
1. Create user
adduser --gecos "" geer
usermod -aG sudo geer
su geer
<-------------------------------------------------------------------------->


<-------------------------------------------------------------------------->
2. install nano
sudo vim.tiny /etc/resolv.conf
sudo apt-get update
sudo apt-get install nano
??? sudo apt-get install byobu
<-------------------------------------------------------------------------->


<-------------------------------------------------------------------------->
3. discard rootlogin
sudo nano /etc/ssh/sshd_config
# PermitRootLogin no
sudo service ssh restart
<-------------------------------------------------------------------------->


<-------------------------------------------------------------------------->
3,5. Solve resolv.conf issue
sudo apt install resolvconf
sudo nano /etc/resolvconf/resolv.conf.d/head
'''
nameserver 8.8.4.4
nameserver 8.8.8.8
'''
sudo service resolvconf restart
<-------------------------------------------------------------------------->


<-------------------------------------------------------------------------->
4. install firewall
sudo apt-get install -y ufw
sudo ufw allow ssh
sudo ufw allow http
sudo ufw allow 443/tcp
sudo ufw --force enable
sudo ufw status
<-------------------------------------------------------------------------->


<-------------------------------------------------------------------------->
5. Install base dependencies
sudo apt-get -y update
sudo apt-get -y install python3 python3-venv python3-dev build-essential libssl-dev libffi-dev python3-setuptools nginx git
#sudo apt-get -y install postfix supervisor nginx git
<-------------------------------------------------------------------------->


<-------------------------------------------------------------------------->
#https://www.digitalocean.com/community/tutorials/how-to-secure-postgresql-on-an-ubuntu-vps
5,5. Install PostgreSQL
sudo apt-get install postgresql postgresql-contrib
sudo su - postgres
sudo nano /etc/postgresql/10/main/pg_hba.conf
psql
\password postgres
<password>
CREATE DATABASE blancer WITH OWNER postgres;
\c blancer
REVOKE ALL ON SCHEMA public FROM public;
GRANT ALL ON SCHEMA public TO access_role;
\q
<-------------------------------------------------------------------------->


<-------------------------------------------------------------------------->
6. install blancer
cd ~
git clone https://github.com/geer26/blancer
cd blancer
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
pip install eventlet psycopg2
nano .env

'''
SECRET_KEY=454rl435dsfinj2354hj2b323nk435kr
SENDGRID_API_KEY=<key>
LC_ALL=C.UTF-8
LANG=C.UTF-8
POSTGRES_URI=postgresql://postgres:<password>@localhost:5432/blancer
'''

echo "export FLASK_APP=blancer.py" >> ~/.profile
flask --help
flask db init
flask db migrate
flask db upgarde
deactivate
<-------------------------------------------------------------------------->


<-------------------------------------------------------------------------->
7. Config systemctl
sudo nano /etc/systemd/system/blancer.service
'''
[Unit]
Description=Gunicorn instance to serve blancer
After=network.target

[Service]
User=geer
Group=www-data
WorkingDirectory=/home/geer/blancer
Environment="PATH=/home/geer/blancer/venv/bin"
ExecStart=/home/geer/blancer/venv/bin/gunicorn -b localhost:5000 --worker-class eventlet -w 1 --bind unix:blancer.sock -m 007 blancer:app

[Install]
WantedBy=multi-user.target
'''

sudo systemctl enable blancer
sudo systemctl start blancer
sudo systemctl status blancer
<-------------------------------------------------------------------------->


<-------------------------------------------------------------------------->
8. Config nginx
mkdir ~/blancer/certs
openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \
  -keyout ~/blancer/certs/key.pem -out ~/blancer/certs/cert.pem
sudo /etc/init.d/nginx start
sudo nano /etc/nginx/sites-available/blancer
'''
server {
    # listen on port 80 (http)
    listen 80;
    server_name _;
    location / {
        # redirect any requests to the same URL but on https
        return 301 https://$host$request_uri;
    }
}
server {
    # listen on port 443 (https)
    listen 443 ssl;
    server_name _;

    # location of the self-signed SSL certificate
    ssl_certificate /home/geer/blancer/certs/cert.pem;
    ssl_certificate_key /home/geer/blancer/certs/key.pem;

    # write access and error logs to /var/log
    access_log /var/log/blancer_access.log;
    error_log /var/log/blancer_error.log;

    location / {
        # forward application requests to the gunicorn server
        proxy_pass http://localhost:5000;
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # reverse proxy for Socket.IO connections
    location /socket.io {
        proxy_pass http://localhost:5000/socket.io;
        proxy_http_version 1.1;
        proxy_redirect off;
        proxy_buffering off;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
    }

    location /static {
        # handle static files directly, without forwarding to the application
        alias /home/geer/blancer/app/static;
        expires 30d;
    }
}
'''
sudo ln -s /etc/nginx/sites-available/blancer /etc/nginx/sites-enabled
sudo rm -r /etc/nginx/sites-available/default
sudo rm -r /etc/nginx/sites-enabled/default
sudo nginx -t
sudo systemctl restart nginx
sudo ufw allow 'Nginx Full'
<-------------------------------------------------------------------------->




	